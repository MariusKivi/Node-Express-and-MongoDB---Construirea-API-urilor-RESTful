
	Implementarea Validarii 'Required' in mongoose






NB!
_____________________________________________________________________
     <> Validarea aceasta este Inteleasa doar de 'Mongoose'

     <> Stim ca in Bazele de Date Relationale 
	=> Validarea poate fi facuta in Baza de Date
	=> prin Birarea Keyword-ului 'required'

	<> Avem 2 Tipuri de Validare:
		(1) Validarea 'Mongoose'

		(2) Validarea 'Joi'

 	    => Ambele pot fi Utilizate, intrucat se Completeaza Reciproc.
_____________________________________________________________________





 (1.1) Copiem Fisierul 'index.js' 
	=> Redenumim Copia 'index-validation.js'
	=> Implemetam Valoarea 'required:true' in Proprietatea 'nume'
	=> din Schema Obiectului:
_____________________________________________________________________

// ==============================================================
// (2) CREAREA 'SCHEMEI' - 'SCHEMACURS' 
// (PRIN PK 'MONGOOSE' & CLASA 'Schema()'):
const schemaCurs = new mongoose.Schema({
    nume: { type: String, required: true },
    autor: String,
    tags: [String],
    data: { type: Date, default: Date.now },
    estePublicat: Boolean
});
_____________________________________________________________________







 (1.2) Comentam Proprietatea 'nume'
_____________________________________________________________________

// ==============================================================
// (4.1) CREAREA 'DOCUMENTELOR' IN BAZA DE DATE 'MONGODB'
// PRIN FUNC. ASINCRONE 'CREARECURS()' 
// ==============================================================
async function creareCurs() {

    // (A) CREAREA OBIECTULUI 'CURS' (INSTANTA A CLASEI):
    const curs = new Curs({
        // nume: 'Curs Angular',
        autor: 'Marius',
        tags: ['angular', 'frontend'],
        estePublicat: true
    });



    // (B) SALVAREA OBIECTULUI 'CURS' IN 'BAZA DE DATE'
    // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
    // 'OPERATII  ASINCRONE & ASTEPTARE'
    const rezultat = await curs.save();


    // (4.2) AFISARE  'REZULTAT':
    console.log(rezultat);
}


// (4.2) APELAREA FUNCTIEI:
creareCurs();

_____________________________________________________________________
	=> In aceasta 'Implementare' 
	=> am gestionat Doar Scenariul 'Succes'
	=> Codul trebuie Introdus in Blocurile 'Try{} Catch{}'




 (1.3) Executam Fisierul 'validarea_in_mongoose.js':
_____________________________________________________________________

	node validarea_in_mongoose.js

_____________________________________________________________________






 >> Afisarea in Terminal
_____________________________________________________________________

(node:6028) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): ValidationError: Curs validation failed: nume: Path `nume` is required.
(node:6028) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.
Conectat la MongoDB ...

_____________________________________________________________________
	=> Primim 'Unhandled  Promise  Rejection  Warning'
	=> care inseamna ca 'Promisiunea' --> a fost 'Respinsa'
	=> insa Nu am Manipulat 'Respingerea' / 'Rejection'.








 (2.1) Gestionarea Erorilor prin Blocurile 'Try{} catch{}'
	=> in Functia 'creareCurs()':
_____________________________________________________________________

// ==============================================================
// (4.1) CREAREA 'DOCUMENTELOR' IN BAZA DE DATE 'MONGODB'
// PRIN FUNC. ASINCRONE 'CREARECURS()' 
// ==============================================================
async function creareCurs() {

    // (A) CREAREA OBIECTULUI 'CURS' (INSTANTA A CLASEI):
    const curs = new Curs({
        // nume: 'Curs Angular',
        autor: 'Marius',
        tags: ['angular', 'frontend'],
        estePublicat: true
    });


    // GESTIONAREA 'ERORILOR':
    try {
        // (B) SALVAREA OBIECTULUI 'CURS' IN 'BAZA DE DATE'
        // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
        // 'OPERATII  ASINCRONE & ASTEPTARE'
        const rezultat = await curs.save();


        // (4.2) AFISARE  'REZULTAT':
        console.log(rezultat);
    } catch (exception) {
        console.log(exception.message);
    }
}
_____________________________________________________________________







 (2.2) Executam Fisierul 'validarea_in_mongoose.js':
_____________________________________________________________________

	node validarea_in_mongoose.js

_____________________________________________________________________






 >> Afisarea in Terminal
_____________________________________________________________________

Curs validation failed: nume: Path `nume` is required.
Conectat la MongoDB ...
_____________________________________________________________________
	=> Primim 'Mesajul Erori'
	=> 'Mongoose' -> nu permite Salvarea Obictului cu Eroare in Baza de Date.












 (3.1) Utilizarea Demonstrativa a Metodei de Validare 'validate()' 
	=> comentam Continutul 'try{}': 
_____________________________________________________________________


    // GESTIONAREA 'ERORILOR':
    try {

        // MET. DE VALIDARE 'VALIDATE()'
        // (RETURNEAZA O 'PROMISIUNE AWAIT'):
        await curs.validate();


        // (B) SALVAREA OBIECTULUI 'CURS' IN 'BAZA DE DATE'
        // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
        // 'OPERATII  ASINCRONE & ASTEPTARE'
        // const rezultat = await curs.save();


        // (4.2) AFISARE  'REZULTAT':
        // console.log(rezultat);

    } 

_____________________________________________________________________

	=> insa nu o vom utiliza pe acesata.




 (3.2) Executam Fisierul 'validarea_in_mongoose.js':
_____________________________________________________________________

	node validarea_in_mongoose.js
_____________________________________________________________________






 >> Afisarea in Terminal
_____________________________________________________________________

Curs validation failed: nume: Path `nume` is required.
Conectat la MongoDB ...
_____________________________________________________________________
	=> Primim aceeasi 'Eroare de Validare'



  


