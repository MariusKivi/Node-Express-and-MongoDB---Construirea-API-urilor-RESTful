

	Documentele de Referinta




  (0) Din 'Compass' 
	=> Stergem 'Baza de Date' - 'locdejoaca'




 (1.1) Instalam 'package.json' cu Valori 'Default'
	-> Rulam Comanda in Folderul Proiectului: 
____________________________________________________________________

	npm init --yes
____________________________________________________________________
	>> se va Genera Automat Fisierul 'package.json'
	>> cu Valori 'Implicite'







 (1.2) Instalam Pachetul 'Mongoose' - Versiunea '5.0.1'
	-> Rulam Comanda in Folderul Proiectului: 
____________________________________________________________________

	npm i mongoose@^5.0.1
____________________________________________________________________








(2) Adaugam in Fisierul '.gitIgnore'
	=> Ignorarea Incarcari Liniei in GitHub:
____________________________________________________________________
	Mongoose__Modelarea_Relatiilor_dintre_Datele_Conectate/node_modules/
____________________________________________________________________





  (3.1) Cream Fisierul 'populare.js':
____________________________________________________________________

// ==============================================================
// (0) INCARCAREA / IMPORTAREA (PT. CONECTAREA LA 'MONGODB')
const mongoose = require('mongoose');



// ==============================================================
// (1) CREAREA & CONECTAREA LA BAZA DE DATE 'LOC DE JOACA' - 'LOC DE JOACA')
//     PRIN MET. 'CONNECT()' (CARE RETURNEAZA 'PROMISIUNI')
mongoose.connect('mongodb://localhost/locdejoaca')
    .then(() => console.log('Conectat la MongoDB ...'))
    .catch(err => console.error('Nu s-a putut conecta la MongoDB ...', err));




// ==============================================================
// (2.1) MODELUL 'AUTOR' CU 'SCHEMA'  
const Autor = mongoose.model('Autor', new mongoose.Schema({
    nume: String,
    biografie: String,
    website: String
}));



// ==============================================================
// (2.2) MODELUL 'CURS' CU 'SCHEMA'  
const Curs = mongoose.model('Curs', new mongoose.Schema({
    nume: String,
}));



// ==============================================================
// (3.1) FUNC. ASINCRONE 'CREAREAUTOR()' 
//       (PT. CREAREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function creareAutor(nume, biografie, website) {
    // CREAREA OBIECTULUI 'AUTOR' (INSTANTA A CLASEI):
    const autor = new Autor({
        nume: nume,
        biografie,
        website
    });

    // SALVAREA OBIECTULUI 'AUTOR' IN 'BAZA DE DATE' - IN 'REZULTAT'
    // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
    // 'OPERATII  ASINCRONE & ASTEPTARE'
    const rezultat = await autor.save();

    // AFISARE 'REZULTAT':
    console.log(rezultat);
}


// ==============================================================
// (3.2) FUNC. ASINCRONE 'CREARECURS()' 
//       (PT. CREAREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function creareCurs(nume, autor) {
    // CREAREA OBIECTULUI 'CURS' (INSTANTA A CLASEI):
    const curs = new Curs({
        nume,
        autor
    });

    // SALVAREA OBIECTULUI 'CURS' IN 'BAZA DE DATE' - IN 'REZULTAT'
    // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
    // 'OPERATII  ASINCRONE & ASTEPTARE'
    const rezultat = await curs.save();

    // AFISARE 'REZULTAT':
    console.log(rezultat);
}


// ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // PRELUAREA 'CURSURILOR'  
        .find()
        // SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}




// ==============================================================
// (4.1) APELARE FUNC. PT. 'CREARE AUTOR' 
// ==============================================================
creareAutor('Marius', 'Biografia mea', 'Website-ul Meu');



// ==============================================================
// (4.2) APELARE FUNC. PT. 'CREARE CURS' 
// ==============================================================
// creareCurs('Cursul Node', 'idAutor')



// ==============================================================
// (4.3) APELARE FUNC. PT. AFISARE 'LIZTA CURSURI' 
// ==============================================================
// listaCursuri();
____________________________________________________________________









  (3.2) Executam Fisierul 'populare.js':
____________________________________________________________________

	node populare.js
____________________________________________________________________




  >> Afisarea in PowerShell:
____________________________________________________________________

Conectat la MongoDB ...
{ _id: 6135de1276a6cb20409d18ca,
  nume: 'Marius',
  biografie: 'Biografia mea',
  website: 'Website-ul Meu',
  __v: 0 }
____________________________________________________________________

	=> Copiem Id-ul: 6135de1276a6cb20409d18ca








  
  (4.1) Modificam Fisierul 'populare.js'
	=> Comentam Apelarea Functiei 'creareAutor',
	=> Activam Functia 'creareCurs'
	=> in care Adaugam Id-ul Copiat: 6135de1276a6cb20409d18ca:
____________________________________________________________________

// ==============================================================
// (4.2) APELARE FUNC. PT. 'CREARE CURS' 
// ==============================================================
creareCurs('Cursul Node', '6135de1276a6cb20409d18ca');
____________________________________________________________________





 (4.2) Re-Executam Fisierul 'populare.js':
____________________________________________________________________

	node populare.js
____________________________________________________________________




  >> Afisarea in PowerShell:
____________________________________________________________________

Conectat la MongoDB ...
{ _id: 6135e5cb54bb4534e0abc34f, nume: 'Cursul Node', __v: 0 }
____________________________________________________________________


	>> obtinem Numele Cursului
	>> dar nu avem Autorul
		=> intrucat nu a fost Definit in 'Modelul Curs'





  (5.1) Adaugarea Proprietatii 'autor'
	=> in Modelul 'curs'
	=> si o  Setam ca si 'Obiect' de Tip 'Schema':
____________________________________________________________________

// ==============================================================
// (2.2) MODELUL 'CURS' CU 'SCHEMA'  
const Curs = mongoose.model('Curs', new mongoose.Schema({
    nume: String,
    autor: {
        type: mongoose.Schema.Types.ObjectId,
        referinta: 'Autor'
    }
}));
____________________________________________________________________




 
 (5.2) Re-Executam Fisierul 'populare.js':
____________________________________________________________________

	node populare.js
____________________________________________________________________




  >> Afisarea in PowerShell:
____________________________________________________________________

Conectat la MongoDB ...
{ _id: 613613cc43d11134c4b756b6,
  nume: 'Cursul Node',
  autor: 6135de1276a6cb20409d18ca,
  __v: 0 }
____________________________________________________________________

	=> In 'Mongoose' in Tabela /Documentul 'curs'
	=> avem 2 inregistrari
	=> iar a 2-a inregistrare are si Prop. 'autor'




