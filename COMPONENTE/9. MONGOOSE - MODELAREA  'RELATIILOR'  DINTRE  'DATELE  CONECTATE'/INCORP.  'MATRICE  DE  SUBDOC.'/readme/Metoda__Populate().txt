
	Metoda 'populate()' - pt. Afisarea Numelui in locul Id-ului



  (1.1) Avem Fisierul 'populare.js'
	=> in care Activam Apelarea Func. 'listaCursuri()'
	=> si Comentam Apelarea Func. 'creareCurs()'
_____________________________________________________________________

// ==============================================================
// (0) INCARCAREA / IMPORTAREA (PT. CONECTAREA LA 'MONGODB')
const mongoose = require('mongoose');



// ==============================================================
// (1) CREAREA & CONECTAREA LA BAZA DE DATE 'LOC DE JOACA' - 'LOC DE JOACA')
//     PRIN MET. 'CONNECT()' (CARE RETURNEAZA 'PROMISIUNI')
mongoose.connect('mongodb://localhost/locdejoaca')
    .then(() => console.log('Conectat la MongoDB ...'))
    .catch(err => console.error('Nu s-a putut conecta la MongoDB ...', err));




// ==============================================================
// (2.1) MODELUL 'AUTOR' CU 'SCHEMA'  
const Autor = mongoose.model('Autor', new mongoose.Schema({
    nume: String,
    biografie: String,
    website: String
}));



// ==============================================================
// (2.2) MODELUL 'CURS' CU 'SCHEMA'  
const Curs = mongoose.model('Curs', new mongoose.Schema({
    nume: String,
    autor: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'Autor'
    }
}));



// ==============================================================
// (3.1) FUNC. ASINCRONE 'CREAREAUTOR()' 
//       (PT. CREAREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function creareAutor(nume, biografie, website) {
    // CREAREA OBIECTULUI 'AUTOR' (INSTANTA A CLASEI):
    const autor = new Autor({
        nume: nume,
        biografie,
        website
    });

    // SALVAREA OBIECTULUI 'AUTOR' IN 'BAZA DE DATE' - IN 'REZULTAT'
    // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
    // 'OPERATII  ASINCRONE & ASTEPTARE'
    const rezultat = await autor.save();

    // AFISARE 'REZULTAT':
    console.log(rezultat);
}


// ==============================================================
// (3.2) FUNC. ASINCRONE 'CREARECURS()' 
//       (PT. CREAREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function creareCurs(nume, autor) {
    // CREAREA OBIECTULUI 'CURS' (INSTANTA A CLASEI):
    const curs = new Curs({
        nume,
        autor
    });

    // SALVAREA OBIECTULUI 'CURS' IN 'BAZA DE DATE' - IN 'REZULTAT'
    // PRIN MET. 'SAVE()' -> CARE  RETURNEAZA O 'PROMISIUNE':
    // 'OPERATII  ASINCRONE & ASTEPTARE'
    const rezultat = await curs.save();

    // AFISARE 'REZULTAT':
    console.log(rezultat);
}


// ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // PRELUAREA 'CURSURILOR'  
        .find()
        // SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}




// ==============================================================
// (4.1) APELARE FUNC. PT. 'CREARE AUTOR' 
// ==============================================================
// creareAutor('Marius', 'Biografia mea', 'Website-ul Meu');



// ==============================================================
// (4.2) APELARE FUNC. PT. 'CREARE CURS' 
// ==============================================================
// creareCurs('Cursul Node', '6135de1276a6cb20409d18ca');



// ==============================================================
// (4.3) APELARE FUNC. PT. AFISARE 'LIZTA CURSURI' 
// ==============================================================
listaCursuri();
_____________________________________________________________________








 (1.2) Executam Fisierul 'populare.js'
_____________________________________________________________________

	node populare.js
_____________________________________________________________________





 >> Afisare in PowerShell:
_____________________________________________________________________

Conectat la MongoDB ...
[ { _id: 61370c9b1508912210bd325f, nume: 'Curs Node' },
  { _id: 61370dbe58e2c805fc512ab9, nume: 'Curs Node' } ]
_____________________________________________________________________










  (2.1) Adaugam in Func. 'listaCursuri()' in Metoda 'select()'
	=> Proprietatea 'autor'
	
_____________________________________________________________________

// ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // PRELUAREA 'CURSURILOR'  
        .find()
        // SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume autor');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}
_____________________________________________________________________









 (2.2) Re-Executam Fisierul 'populare.js'
_____________________________________________________________________

	node populare.js
_____________________________________________________________________





 >> Afisare in PowerShell:
_____________________________________________________________________

[ { _id: 61370c9b1508912210bd325f, nume: 'Curs Node' },
  { _id: 61370dbe58e2c805fc512ab9,
    nume: 'Curs Node',
    autor: 61370abc5808e1316cfc8e9e } ]
_____________________________________________________________________
	>> al 2-lea Document are un 'Autor',
	>> dar Obtinem doar 'Referinta' pt. 'Id-ul Obiectului'
	=> iar in Aplicatiile Reale, dorim sa Incarcam Documentul
	   -> (pt. a ii putea Afisa Numele).







  (3.1) Metoda 'populate()' in Func. 'listaCursuri()' 
	  => pt. Incarcarea Documentului 'Autor' 
	  => si Afisarea 'Numelui Autorului' 
	  => in locul 'Id-ului Autorului':
_____________________________________________________________________

/ ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // MET. FIND - PRELUAREA 'CURSURILOR'  
        .find()
        // MET. 'POPULATE()' - PT. INLOCUIREA 'ID' CU 'NUME
        .populate('autor')
        // MET. SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume autor');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}
_____________________________________________________________________









 (3.2) Re-Executam Fisierul 'populare.js'
_____________________________________________________________________

	node populare.js
_____________________________________________________________________





 >> Afisare in PowerShell:
_____________________________________________________________________

Conectat la MongoDB ...
[ { _id: 61370c9b1508912210bd325f, nume: 'Curs Node' },
  { _id: 61370dbe58e2c805fc512ab9,
    nume: 'Curs Node',
    autor:
     { _id: 61370abc5808e1316cfc8e9e,
       nume: 'Marius',
       biografie: 'Biografia mea',
       website: 'Website-ul Meu',
       __v: 0 } } ]
_____________________________________________________________________
	=> Obtinem Reprezentarea Completa a Documentului 'Autor'









 (4.1) Metodei 'populate()' in Func. 'listaCursuri()' 
	  => cu 2 Proprietati
	  => in a 2-a Proprietate Specificam 'Proprietatea Inclusa/Exclusa'
	  => Includem doar 'nume':
_____________________________________________________________________


// ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // MET. FIND - PRELUAREA 'CURSURILOR'  
        .find()
        // MET. 'POPULATE()' - PT. INLOCUIREA 'ID' CU 'NUME
        .populate('autor', 'nume')
        // MET. SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume autor');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}
_____________________________________________________________________









 (4.2) Re-Executam Fisierul 'populare.js'
_____________________________________________________________________

	node populare.js
_____________________________________________________________________





 >> Afisare in PowerShell:
_____________________________________________________________________

Conectat la MongoDB ...
[ { _id: 61370c9b1508912210bd325f, nume: 'Curs Node' },
  { _id: 61370dbe58e2c805fc512ab9,
    nume: 'Curs Node',
    autor: { _id: 61370abc5808e1316cfc8e9e, nume: 'Marius' } } ]
_____________________________________________________________________
	=> acum 'autor' are doar 2 Proprietati: 'id' si 'nume'	









 (5.1) Excluderea din Afisare 
	=> a Proprietatii '_id'
	=> prin '-proprietate_exclusa':
_____________________________________________________________________

// ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // MET. FIND - PRELUAREA 'CURSURILOR'  
        .find()
        // MET. 'POPULATE()' - PT. INLOCUIREA 'ID' CU 'NUME
        .populate('autor', 'nume -_id')
        // MET. SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume autor');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}
_____________________________________________________________________









 (5.2) Re-Executam Fisierul 'populare.js'
_____________________________________________________________________

	node populare.js
_____________________________________________________________________





 >> Afisare in PowerShell:
_____________________________________________________________________

Conectat la MongoDB ...
[ { _id: 61370c9b1508912210bd325f, nume: 'Curs Node' },
  { _id: 61370dbe58e2c805fc512ab9,
    nume: 'Curs Node',
    autor: { nume: 'Marius' } } ]
_____________________________________________________________________
	=> Obtinem Prop. 'autor' cu o Singura Proprietate - 'nume'




 (6) Putem avea Mai Mule Metode'populate()': 
_____________________________________________________________________


// ==============================================================
// (3.3) FUNC. ASINCRONE 'LISTACURSURI()' 
//       (PT. CITIREA 'DOCUMENTELOR' IN 'MONGODB')
// ==============================================================
async function listaCursuri() {
    const cursuri = await Curs
        // MET. FIND - PRELUAREA 'CURSURILOR'  
        .find()
        // MET. 'POPULATE()' - PT. INLOCUIREA 'ID' CU 'NUME
        .populate('autor', 'nume -_id')
        .populate('categorie', 'nume')
        // MET. SELECTAREA ATRIBUTULUI 'NUME'
        .select('nume autor');

    // AFISARE 'CURSURI':
    console.log(cursuri);
}
_____________________________________________________________________


NB!

 >> Daca un 'id' nu exista in Baza de Date
	=> se va Returna 'null'



