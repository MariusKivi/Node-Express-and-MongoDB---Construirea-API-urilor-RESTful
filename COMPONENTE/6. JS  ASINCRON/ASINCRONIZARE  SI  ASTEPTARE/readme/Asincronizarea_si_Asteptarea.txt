

	Asincronizarea si Asteptarea




  <> Abordarea 'Asincronizarea si Asteptarea'
	=> permite Scrierea Condului 'Asincron'
	=> ca si Codul 'Sincron'







  (1.1) Scriem Cod 'Asincron' ce arata ca un Cod 'Sincron' prin 'await'
	  => Creand Functia 'displayCommits()'
	  <= Comentam Consumul bazat pe 'Promisiuni':
_____________________________________________________________________



// ==============================================================
// (4.1.2)  CONSUMAREA  'PROMISIUNII' PRIN:  APELARE' A FUNC. 'GETUSER(ID)' &
// MET. 'THEN()' - PT. 'PRELUAREA REZULTATULUI'  OP. 'ASINCRON' &
// MET. 'CATCH()' - 'PRINDEREA  ERORILOR' 
// ==============================================================
// getUser(1)
//     .then(user => getRepositories(user.gitHubUsername))
//     .then(depozite => getCommits(depozite[0]))
//     .then(connits => console.log('Comite: ', commits))
//     .catch(err => console.log('Eroare: ', err.message));



// ==============================================================
// (4.1.3)  CONSUMAREA  PRIN  FUNCTIA DECORATA CU 'ASYNC' SI
//          PRIN 'RESCRIEREA PROMISIUNII' 
//          PRIN ABORDAREA 'ASINCRONIZARE  SI  ASTEPTARE'  ('ASYNC  AND  ARAIT')
// ==============================================================
async function displayCommits() {

    // APELAM FUNC.:
    const user = await getUser(1);

    // APELAM FUNC.:
    const depozite = await getRepositories(user.gitHubUsername);

    // APELAM FUNC.:
    const commits = await getCommits(depozite[0]);

    // AFISARE:
    console.log(commits);
}


// APELAREA FUNCTIEI:
displayCommits();



_____________________________________________________________________
	=> este 'Suntactical Suger',
	=> in interior itilizam 'Promisiuni'
	=> Codul Ruleaza 'Asincron'
	=> dar Arata si Citeste 'Sincron'.







  (1.2) Executam 'index.js':
_____________________________________________________________________

	node index.js
_____________________________________________________________________



  >> Afisarea in Terminal:
_____________________________________________________________________

Inainte
Dupa
Citirea unui Utilizator din Baza de Date...
Citirea unui Utilizator din Baza de Date...
Apelarea API-ului GitHun...
Apelarea API-ului GitHun...
[ 'commit' ]
_____________________________________________________________________











  (2.1) Prinderea 'Erorilor' prin Blocurilr 'try{} catch{}':
_____________________________________________________________________


// ==============================================================
// (4.1.3)  CONSUMAREA  PRIN  FUNCTIA DECORATA CU 'ASYNC' SI
//          PRIN 'RESCRIEREA PROMISIUNII' 
//          PRIN ABORDAREA 'ASINCRONIZARE  SI  ASTEPTARE'  ('ASYNC  AND  ARAIT')
//   UTIL. BLOCURILOR 'TRY{} CATCH{}' -- PT. 'PRINDEREA  ERORILOR' 
// ==============================================================
async function displayCommits() {

    try {
        // APELAM FUNC.:
        const user = await getUser(1);

        // APELAM FUNC.:
        const depozite = await getRepositories(user.gitHubUsername);

        // APELAM FUNC.:
        const commits = await getCommits(depozite[0]);

        // AFISARE:
        console.log(commits);
    } catch (err) {
        console.log('Eroare: ', err.message);
    }
}

_____________________________________________________________________









  (2.2) Respingerea Promisiunii --> in Metoda  'getRepositories()': 
_____________________________________________________________________

// ========================================================================
// (4.2.2) FUNC. 'ASINCRONA' - 'GETREPOSITORIES(USERNAME)' 
//       (PT. 'PRINDEREA  ERORILOR' )
// ========================================================================
function getRepositories(username) {

    // RETURNAREA 'FUNCTIEI CONSTRUCTOR' A 'PROMISIUNII':
    return new Promise((rezolvare, respingere) => {

        // FUNCTIA 'SETTIMEOUT( ()=>{}, TIMP_DE_ASTEPTARE)'
        setTimeout(() => {
            // AFISARE:
            console.log('Apelarea API-ului GitHun...');

            // 'REZOLVARE()' CU 'MATRICEA' - 'USER':
            respingere(new Error('Nu s-au putut obține depozitele ...'));

        }, 2000);
    });
}
_____________________________________________________________________







  


  (2.3) Executam 'index.js':
_____________________________________________________________________

	node index.js
_____________________________________________________________________



  >> Afisarea in Terminal:
_____________________________________________________________________

Inainte
Dupa
Citirea unui Utilizator din Baza de Date...
Citirea unui Utilizator din Baza de Date...
Apelarea API-ului GitHun...
Eroare:  Nu s-au putut obține depozitele ...
_____________________________________________________________________






