

	Callbacks (Apelari Inverse)



  <> Utilizarea unei 'Functie' de 'Apelare Invesa' pentru a 'Prelua Obiectului' - 'User'.


  <> 'Callback':
	=> este o Functie, 
	=> pe care o vom 'Apela'
	=> cand 'Rezultatul' unei Operatiuni 'Asincron'
	=> este 'Pregatit'.


  (1.1) Adaugam Parametrul "Functiei 'calback'":
_____________________________________________________________________
// ==============================================================
// (1) AFISARE 1:
// ==============================================================
console.log('Inainte');

// ==============================================================
// (4) APELAREA FUNC. 'GETUSER(ID, FUNCTION(USER)( OBT_ACCESUL_ASUPRA_USERULUI_DIN_DB))':
// ==============================================================
getUser(1, function(user) {
    // AFISARE:
    console.log('Utilizator: ', user);
});


// ==============================================================
// (2) AFISARE 2:
// ==============================================================
console.log('Dupa');



// ==============================================================
// (3) FUNC. 'GETUSER(ID)'
// ==============================================================
function getUser(id, callback) {
    // EX. DE 'FUNCTIE  ASINCRON / FARA BLOCARE'
    // FUNCTIA 'SETTIMEOUT( ()=>{}, TIMP_DE_ASTEPTARE)'
    setTimeout(() => {
        // AFISARE:
        console.log('Citirea unui Utilizator din Baza de Date');

        // CALLBACK CU 'OBIECTUL' - 'USER':
        callback({ id: id, gitHubUsername: 'marius' });
    }, 2000);
}
_____________________________________________________________________






  (1.2) Executam 'index.js':
_____________________________________________________________________

 	node index.js
_____________________________________________________________________



  >> Afisarea in Terminal:
_____________________________________________________________________

Inainte
Dupa
Citirea unui Utilizator din Baza de Date
Utilizator:  { id: 1, gitHubUsername: 'marius' }
_____________________________________________________________________




  (1.3) Putem Folosi Sintaxa 'Functiei Sageata':
_____________________________________________________________________

// getUser(1, function(user) {
getUser(1, (user) => {
    // AFISARE:
    console.log('Utilizator: ', user);
});
_____________________________________________________________________








  (2) Crearea Functiei 'Sincrone' - 'getRepositories(username)'
_____________________________________________________________________

function getRepositories(username) {
    // RETURNAREA 'MATRICEI' CU LISTA DE 'DEPOZITE':
    return ['depozit1', 'depozit2', 'depozit3'];
}
_____________________________________________________________________




 (3.1) Convertirea Functiei 'Sincrone' - 'getRepositories(username)'
	=> om Functie 'Asincrona'
	=> prin Utilizare 'Callback':
_____________________________________________________________________

// ==============================================================
function getUser(id, callback) {
    // EX. DE 'FUNCTIE  ASINCRON / FARA BLOCARE'
    // FUNCTIA 'SETTIMEOUT( ()=>{}, TIMP_DE_ASTEPTARE)'
    setTimeout(() => {
        // AFISARE:
        console.log('Citirea unui Utilizator din Baza de Date...');

        // 'CALLBACK' CU 'OBIECTUL' - 'USER':
        callback({ id: id, gitHubUsername: 'marius' });
    }, 2000);
}
_____________________________________________________________________




 (3.2) Cu Apelarea:
_____________________________________________________________________
// getUser(1, function(user) {
getUser(1, (user) => {
    // AFISARE:
    // console.log('Utilizator: ', user);

    // AELAREA FUNC. 'ASINCRONE' - 'GETREPOSITORIES()':
    getRepositories(user.gitHubUsername, (depozite) => {
        console.log('Depozite: ', depozite);
    });
});
_____________________________________________________________________



  (4) Executam 'index.js'
_____________________________________________________________________

	node index.js
_____________________________________________________________________



  >> Afisarea in Terminal:
_____________________________________________________________________
Inainte
Dupa
Citirea unui Utilizator din Baza de Date...
Apelarea API-ului GitHun...
Depozite:  [ 'depozit1', 'depozit2', 'depozit3' ]

_____________________________________________________________________




